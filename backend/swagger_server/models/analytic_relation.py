# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AnalyticRelation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, hour: int = None, heartrate: float = None, speed: float = None):  # noqa: E501
        """AnalyticRelation - a model defined in Swagger

        :param hour: The hour of this AnalyticRelation.  # noqa: E501
        :type hour: int
        :param heartrate: The heartrate of this AnalyticRelation.  # noqa: E501
        :type heartrate: float
        :param speed: The speed of this AnalyticRelation.  # noqa: E501
        :type speed: float
        """
        self.swagger_types = {
            'hour': int,
            'heartrate': float,
            'speed': float
        }

        self.attribute_map = {
            'hour': 'hour',
            'heartrate': 'heartrate',
            'speed': 'speed'
        }

        self._hour = hour
        self._heartrate = heartrate
        self._speed = speed

    @classmethod
    def from_dict(cls, dikt) -> 'AnalyticRelation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type dikt: dict
        :return: The AnalyticRelation object.
        :rtype: AnalyticRelation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hour(self) -> int:
        """Gets the hour of this AnalyticRelation."""
        return self._hour

    @hour.setter
    def hour(self, hour: int):
        """Sets the hour of this AnalyticRelation."""
        self._hour = hour

    @property
    def heartrate(self) -> float:
        """Gets the heartrate of this AnalyticRelation."""
        return self._heartrate

    @heartrate.setter
    def heartrate(self, heartrate: float):
        """Sets the heartrate of this AnalyticRelation."""
        self._heartrate = heartrate

    @property
    def speed(self) -> float:
        """Gets the speed of this AnalyticRelation."""
        return self._speed

    @speed.setter
    def speed(self, speed: float):
        """Sets the speed of this AnalyticRelation."""
        self._speed = speed
